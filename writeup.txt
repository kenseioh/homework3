The trie class and the trie node class were by far the hardest. when I was trying to create the trie node class i pretty much looked at how to create a trie node and trie class on java, and when i implemented it through that i was then able to translate it to c# because they were very similar. i was then able to work on the web methods which were much easier. to do the buildtrie i also looked at the same thing. I found a similar thing for the buildtrie that i did with the other web methods. Through the same thing I ended up figuring out how to do the other two web methods, search tree and downloadtrie. It was extremely difficult figuring out how to do all of that because i don't understand the majority of the assignment but I was able to figure out how to do most of the things because the issues was so hard to do. There was another hard part which was the ajax request that i had lots of difficult because i couldn't figure out how to do the succes function of the ajax request. I did not know about the data. After being able to figure it out i was able to use the index.html and create it properly. Now that i am able to use ajax i had to figure out how to do the other things within like creating the simple search bar and everything inside of the index. My issue was also with web config because it is really difficult trying to figure out how to get the correct key for all of the app settings so i was unable to do lots of things. For the most part the most difficult thing to do was the trie class because we never learned how to do trie class and i only know how to use it because i took data structure class, but i did not understand how other people who be able to understand trie class let alone the trie method in c sharp, which no one has experience. I ended up using a string instead of an arraylist because i had no idea what was inefficient about a list until i heard later on after implementing my trie list. Because of this i was able to create it but it was far slower than most and now i am unable to make a trie tree that would be able to store over 2 million or anything.
